Next.js
-SSR React app
-ServerSideRenderingcan improve performance and UX by pre-rendering and sending fully formed HTML to client browser 
-->(consider React would be rendering on the client side after server sends code bundle. Next pre-renders.)
-->Forms of pre-rendering:
1. SSG [StaticSiteGeneration]/Static Generation (recommended) - HTML generated at build time and reused at each req. 
---Efficient, built on server, can be cached by CDN(ContentDeliveryNetwork).
2. SSR - HTML generated on each req
NOTE: Both are generated on the server. They can be combined with client-side fetching to create hybrid apps that use advantages of both forms.

-Automatically splits code into smaller chunks = easier and less time to load
-SEO optimization - linked to SSR; allows search engines to easily crawl and index pages
-Built in features speed up development eg. file-based routing (vs React Router), auto code splitting, built-in API routes, TS support
-Dev experience - eg. hot reloading, easy integration 
-Scalability - able to handle large-scale apps with features mentioned already as well as eg. caching, support for serverless functions.

pages/api folder for req BE 
app folder with pages FE


Layout + Routing
-simple routing - create dir for page you want to link/route to eg. app/about/page.tsx automatically creates route
-about/layout.tsx applies to all pages in app
-setup layout for specific tree eg

export default function AboutLayout({
	children,
}: {
	children: React.ReactNode;
}) {
	return <>{children}</>;
}

-when creating styles you can have global styles as well as specific styles using style modules eg. styles.module.css for each page/path in layout
(you can use the same name for identifiers with different styles in different style pages since they are based on context in which they are being used eg. .main{})

NEW PROJECT Nextjs@13.2.3
NOTE about 13.2.3 upgrade - fewer folders in app : no pages dir; everything is now in app dir - IMP changes to metadata 
https://nextjs.org/docs/app/building-your-application/optimizing/metadata
-note: meta and link ltags would be defined in <head> HTML in layout/page but head is .js file is deprecated after 13.2
-(however in project am going over example using head.js file)
--> Static vs Dynamic metadata

Fetching data fundamentals
https://nextjs.org/docs/app/building-your-application/data-fetching
- RECOMMENDATIONS: 1. fetch data on server using Server components; 2. parallel data fetching; 3. (for layout/pages) fetch data where it is used [may see same fetch req more than once] --> Next will auto deduplicate requests in a tree and only make the req once; 4. use LoadingUI, Streaming, Suspense to progressively render page while content loads

Fetching with server components:
- differences you can control like static site generation, server side rendering, incremental static regeneration strategy etc.
-( static with props vs SSG static that use data/props)
- In dev mode you can't really tell if components are static server components or SSR components or apply any other data fetching strategies?
- If you run build (npm run build) instead of dev Next will tell you what type of components are being generated PROVIDES LOTS OF INFO ABOUT ROUTES(pages, app), LAYOUTS AND COMPONENTS + size and response time --> npm run start will use build that is created to get better idea of how app will respond
--> notice on network tab how instantly made reqs/pre-fetched and pre-rendered data for users in SSR pages even before mousing over compared to dev mode
*- we can use a strategy with our Next.js code for server side rendering since it won't know what req we are going to make (unlike static pages where it is auto pre-rendered)
https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating

If you are creating dynamic data without providing static props => SSR component generated at req time from the server
Nextjs recommends SSG, so if you know params in advance you can provide them by generating static params with function [userId]/pages.tsx(generateStaticParams)so you can have SSG pages

Using Tailwindcss - https://tailwindcss.com/docs/guides/nextjs (skipped this project since I have not done tailwind)

NEW PROJECT Nextjs@13.2.4 with src_dir
https://nextjs.org/docs/app/building-your-application/routing
https://nextjs.org/docs/app/building-your-application/routing/route-handlers
-API Routes replaced with Route Handlers in 13.2
-Route Handlers are only available inside the app dir and are equivalent of API routes inside pages_dir so you do not need to use both (you cannot have a route.ts in the same dir as a page.tsx)
-Route Handlers are evaluated dynamically when:
--> 1.using Req obj with GET; 2. using any other HTTP method; 3.  using dynamic functions (eg. cookies and headers)

NEW PROJECT Nextjs@13.2.4 with src_dir 
NOTE: API Routes have been replaced by Route Handlers in 13.2
REST APIs in Next.js - Use Cases:
https://nextjs.org/docs/pages/building-your-application/routing/api-routes
- Can build entire API with API Routes 
- If you have existing API no need to forward calls to the API through an API route 
- Can be used to mask the URL of external services, hide secret API keys, secret resource URLs
- Can be used to process form data with API route
- To use environment variables on the server to securely access external services - built-in support for loading .env variables from .env.local into process.env
- Dont't need to use API route if fetching from a server component; if you are using secret API key or secret URL it will already be hidden on the server (non-viewable on client-side code)
- If not using secret API key or secret URL you can fetch directly from client components without using API routes

- For this project not using (getStaticProps) instead using generateStaticParams where the data must be available at build time so the page can render ahead of time for the user's requests...
-->...Dont't use API routes for server components --> This is important to consider as if you are building an app that depends on API data it will not be available and you will get a build error as they cannot be built at the same time.
[server components need data at build time, to generate static params for SSG, which cannot be accessed before/while the API route is being built]

NOTE ON API KEYS in .env.local --> ususally a specified value issued by 3rd party data source when you set up an account.

MIDDLEWARE - 
- Can modify rq headers, res headers and send responses
*Next EdgeRuntime is based on standard web APIs, which is used by middleware and edge API routes
1. create middleware.ts/js file at same level as your 'pages' (in <root> or if using <src (not app)> dir ) --> 2. export middleware function
- IMP: middleware file applies to EVERY request on the web app (not just API requests) - it will be invoked for every route, and every resource needed in the app --> consider limiting where middleware is applied (eg. just APIs): 2 ways to do this:
way1 = MATCHING PATHS - define variable config that is object with {matcher: '<path>'}
-- can be a static route match without any query params
-- matcher can be an array to match multiple paths eg. matcher: ['dashboard/path', 'api/path']
-- matcher able to use regex
* configured matchers : must start with / 
way2 = USING CONDITIONALS 

Using middleware npm modules/packages (dependencies)
eg. limiter - provides generic rate limiter for the web and node.js. Useful for API clients, web crawling or other task that need to be throttled
https://www.npmjs.com/package/limiter
--> we can't use it in our middleware file because it has a dependency on Nodejs that won't work in EdgeRuntime so need to be applied inside the routes instead
- you can create multiple instances of limiter in different files to apply different rules to the routes (eg. if you didn't want routes to share # of limiter tokens)

CORS - Cross Origin Resource Sharing is middleware that is almost always used to make the API public
CORS checks the origin to see if it is allowed to make req/access the API then can specify things like methods or headers allowed by that origin
Nextjs API Routes do not specify CORS headers, meaning they are same-origin only by default (so you would always get a CORS error unless you work around it)--> apply what CORS does without using the actual CORS package --> You can customize such behavior by wrapping the request handler with the CORS request helpers. (i.e. without using cors modules)
https://nextjs.org/docs/api-routes/cors



















